using UnityEngine;

[System.Serializable]
public class PickupItem : MonoBehaviour
{
    [Header("Th√¥ng tin v·∫≠t ph·∫©m")]
    public string itemID;
    public string itemName;
    public GameObject model;

    [Tooltip("N·∫øu true th√¨ v·∫≠t ph·∫©m s·∫Ω bi·∫øn m·∫•t khi nh·∫∑t")]
    public bool destroyOnPickup = true;

    [Header("Sound Settings")]
    public AudioClip pickupSound;
    [Range(0f, 1f)]
    public float soundVolume = 1f;
    public bool spatialSound = false;

    [Header("Monologue Settings - TR∆Ø·ªöC khi nh·∫∑t")]
    [Tooltip("Hi·ªÉn th·ªã suy nghƒ© TR∆Ø·ªöC khi nh·∫∑t (nh·∫•n E l·∫ßn 1)")]
    public bool showMonologueBeforePickup = false;

    [Tooltip("N·ªôi dung suy nghƒ© TR∆Ø·ªöC khi nh·∫∑t")]
    [TextArea(3, 5)]
    public string[] monologueBeforePickup = new string[]
    {
        "ƒê√¢y l√† g√¨ nh·ªâ?",
        "C√≥ v·∫ª quan tr·ªçng..."
    };

    [Header("Monologue Settings - SAU khi nh·∫∑t")]
    [Tooltip("Hi·ªÉn th·ªã suy nghƒ© SAU khi nh·∫∑t xong")]
    public bool showMonologueAfterPickup = false;

    [Tooltip("N·ªôi dung suy nghƒ© SAU khi nh·∫∑t")]
    [TextArea(3, 5)]
    public string[] monologueAfterPickup = new string[]
    {
        "ƒê√£ l·∫•y ƒë∆∞·ª£c r·ªìi.",
        "Hy v·ªçng n√≥ s·∫Ω h·ªØu √≠ch..."
    };

    private AudioSource audioSource;
    public bool isCollected = false;
    private bool hasShownBeforeMonologue = false; // ƒê√£ hi·ªán monologue tr∆∞·ªõc ch∆∞a

    void Awake()
    {
        // Get or add AudioSource component
        audioSource = GetComponent<AudioSource>();
        if (audioSource == null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
        }

        // Configure AudioSource
        audioSource.playOnAwake = false;
        audioSource.clip = pickupSound;
        audioSource.volume = soundVolume;
        audioSource.spatialBlend = spatialSound ? 1f : 0f;

        // For 3D sound settings
        if (spatialSound)
        {
            audioSource.minDistance = 1f;
            audioSource.maxDistance = 10f;
            audioSource.rolloffMode = AudioRolloffMode.Linear;
        }
    }

    public virtual void OnPickup()
    {
        if (isCollected) return;

        // CASE 1: C√≥ monologue tr∆∞·ªõc khi nh·∫∑t V√Ä ch∆∞a hi·ªÉn th·ªã
        if (showMonologueBeforePickup && !hasShownBeforeMonologue && monologueBeforePickup.Length > 0)
        {
            if (CharacterMonologue.Instance != null)
            {
                hasShownBeforeMonologue = true;
                CharacterMonologue.Instance.ShowMonologueWithCallback(monologueBeforePickup, () =>
                {
                    // SAU KHI monologue tr∆∞·ªõc xong, hi·ªÉn th·ªã prompt ƒë·ªÉ nh·∫∑t ti·∫øp
                    if (TextManager.Instance != null)
                    {
                        TextManager.Instance.ShowPrompt($"[E] Nh·∫∑t {itemName}");
                    }
                });

                // ·∫®n prompt hi·ªán t·∫°i trong l√∫c xem monologue
                if (TextManager.Instance != null)
                {
                    TextManager.Instance.HidePrompt();
                }

                Debug.Log($"üìñ ƒêang xem suy nghƒ© v·ªÅ {itemName}. Nh·∫•n E l·∫ßn n·ªØa ƒë·ªÉ nh·∫∑t.");
                return; // D·ª™NG L·∫†I, ch∆∞a nh·∫∑t
            }
        }

        // CASE 2: ƒê√£ xem monologue tr∆∞·ªõc (ho·∫∑c kh√¥ng c√≥), gi·ªù nh·∫∑t th·∫≠t
        isCollected = true;

        // ·∫®n prompt ngay khi b·∫Øt ƒë·∫ßu nh·∫∑t
        if (TextManager.Instance != null)
        {
            TextManager.Instance.HidePrompt();
        }

        // CASE 2A: C√≥ monologue SAU khi nh·∫∑t
        if (showMonologueAfterPickup && monologueAfterPickup.Length > 0)
        {
            // Nh·∫∑t tr∆∞·ªõc
            PerformPickup();

            // R·ªìi hi·ªÉn th·ªã monologue sau
            if (CharacterMonologue.Instance != null)
            {
                CharacterMonologue.Instance.ShowMonologueWithCallback(monologueAfterPickup, null);
            }
        }
        // CASE 2B: Kh√¥ng c√≥ monologue sau, nh·∫∑t lu√¥n
        else
        {
            PerformPickup();
        }
    }

    /// <summary>
    /// Th·ª±c hi·ªán h√†nh ƒë·ªông nh·∫∑t ƒë·ªì
    /// </summary>
    private void PerformPickup()
    {
        Debug.Log($"‚úÖ ƒê√£ nh·∫∑t: {itemName}");

        // Play sound effect if assigned
        if (audioSource != null && pickupSound != null)
        {
            audioSource.PlayOneShot(pickupSound, soundVolume);
            Debug.Log($"üîä Playing sound for {itemName}");
        }
        else
        {
            Debug.LogWarning($"‚ö† No pickup sound assigned or AudioSource missing for {itemName}!");
        }

        // Just hide the object, don't destroy it yet
        if (destroyOnPickup)
        {
            // Hide visually but keep the GameObject alive for sound playback
            Renderer[] renderers = GetComponentsInChildren<Renderer>();
            foreach (Renderer r in renderers)
            {
                r.enabled = false;
            }

            // Disable collider so it can't be picked up again
            Collider col = GetComponent<Collider>();
            if (col != null)
            {
                col.enabled = false;
            }

            // Destroy after sound finishes
            float delay = pickupSound != null ? pickupSound.length + 0.1f : 0.1f;
            Destroy(gameObject, delay);
        }
    }

    // Reset state khi c·∫ßn (v√≠ d·ª• khi load l·∫°i game)
    public void ResetState()
    {
        hasShownBeforeMonologue = false;
        isCollected = false;
    }
}